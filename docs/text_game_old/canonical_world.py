"""
Canonical world setup for the house adventure game.
Builds and returns a fully populated Game object with all rooms, items, and actions.
"""

from backend.text_adventure_games import games, things
from backend.text_game_old.house_actions import (
    OpenCloseItem, CloseItem, TakeFromContainer,
    UnlockDoor, LockDoor, TurnOnSink,
    TurnOffSink, FillCup, FillBathtub, UseWashingMachine,
    WatchTV, PlayPool, TakeBath, UseComputer
)
from backend.text_game_old.house_actions.house_action_protocol import HouseActionProtocol
from typing import Type

def build_canonical_house_environment() -> games.Game:
    """
    Build and return the canonical house adventure Game object.
    Includes all rooms, items, containers, and custom actions.
    """
    # --- Define Locations (Rooms) ---
    bedroom = things.Location("Bedroom", "A cozy bedroom with a bed, closet, and dresser.")
    kitchen = things.Location("Kitchen", "A modern kitchen with appliances, cabinets, and a large table.")
    entry = things.Location("Entry Room", "The main entryway to the house, with a door leading outside.")
    dining = things.Location("Dining Room", "A formal dining room with a long table and chairs.")
    bathroom = things.Location("Bathroom", "A clean bathroom with a bathtub, sink, and toilet.")
    laundry = things.Location("Laundry Room", "A small laundry room with a washer, dryer, and supplies.")
    living = things.Location("Living Room", "A spacious living room with sofas, a TV, and bookshelves.")
    game = things.Location("Game Room", "A fun game room with a pool table and entertainment area.")
    # --- Connect Locations (based on grid and adjacency) ---
    entry.add_connection("north", kitchen)
    entry.add_connection("east", dining)
    kitchen.add_connection("south", entry)
    kitchen.add_connection("east", dining)
    kitchen.add_connection("north", bedroom)
    bedroom.add_connection("south", kitchen)
    bedroom.add_connection("east", laundry)
    bathroom.add_connection("south", game)
    laundry.add_connection("west", bedroom)
    laundry.add_connection("east", game)
    living.add_connection("west", dining)
    living.add_connection("east", game)
    game.add_connection("north", bathroom)
    game.add_connection("west", laundry)
    game.add_connection("south", living)
    dining.add_connection("west", kitchen)
    dining.add_connection("east", living)
    dining.add_connection("north", bedroom)
    # --- Add Items, Characters, etc. (verbatim from demo1.py) ---
    bed = things.Item("bed", "a comfortable bed", "A soft bed for sleeping.")
    bed.set_property("is_interactable", True)
    bed.set_property("is_sleepable", True)
    bed.set_property("is_made", True)
    bed.set_property("cleanliness", 90)  # numeric 0-100
    bed.set_property("color", "blue")
    bedroom.add_item(bed)
    closet = things.Item("closet", "a large closet", "A closet for clothes and storage.")
    closet.set_property("is_interactable", True)
    closet.set_property("is_openable", True)
    closet.set_property("is_open", False)
    closet.set_property("is_container", True)
    closet.set_property("is_locked", False)
    closet.set_property("fullness", 50)  # numeric 0-100
    closet.set_property("material", "wood")
    bedroom.add_item(closet)
    dresser = things.Item("dresser", "a wooden dresser", "A dresser with several drawers.")
    dresser.set_property("is_interactable", True)
    dresser.set_property("is_openable", True)
    dresser.set_property("is_open", False)
    dresser.set_property("is_container", True)
    dresser.set_property("is_locked", False)
    dresser.set_property("fullness", 30)
    dresser.set_property("material", "wood")
    bedroom.add_item(dresser)
    alarm_clock = things.Item("alarm clock", "an alarm clock", "A digital alarm clock.")
    alarm_clock.set_property("is_interactable", True)
    alarm_clock.set_property("is_switchable", True)
    alarm_clock.set_property("is_on", False)
    alarm_clock.set_property("alarm_time", 7.0)
    alarm_clock.set_property("volume", 5)
    alarm_clock.set_property("color", "red")
    bedroom.add_item(alarm_clock)
    clothes = things.Item("clothes", "a pile of clothes", "Clothes for wearing.")
    clothes.set_property("is_interactable", True)
    clothes.set_property("is_wearable", True)
    clothes.set_property("cleanliness", 80)
    clothes.set_property("color", "white")
    clothes.set_property("material", "cotton")
    bedroom.add_item(clothes)
    fridge = things.Item("fridge", "a large fridge", "A modern fridge, maybe there's something inside.")
    fridge.set_property("is_interactable", True)
    fridge.set_property("is_openable", True)
    fridge.set_property("is_open", False)
    fridge.set_property("is_powered", True)
    fridge.set_property("is_clean", True)
    fridge.set_property("temperature", 4)  # Celsius
    kitchen.add_item(fridge)
    oven = things.Item("oven", "a kitchen oven", "A modern oven for baking and roasting.")
    oven.set_property("is_interactable", True)
    oven.set_property("is_openable", True)
    oven.set_property("is_open", False)
    oven.set_property("is_switchable", True)
    oven.set_property("is_on", False)
    oven.set_property("is_clean", True)
    oven.set_property("temperature", 180)
    kitchen.add_item(oven)
    sink = things.Item("sink", "a kitchen sink", "A deep sink with a shiny faucet.")
    sink.set_property("is_interactable", True)
    sink.set_property("is_switchable", True)
    sink.set_property("is_on", False)
    sink.set_property("water_level", 0)
    sink.set_property("is_clean", True)
    kitchen.add_item(sink)
    cabinets = things.Item("cabinets", "kitchen cabinets", "Wooden cabinets for storage.")
    cabinets.set_property("is_interactable", True)
    cabinets.set_property("is_openable", True)
    cabinets.set_property("is_open", False)
    cabinets.set_property("fullness", 60)
    cabinets.set_property("material", "wood")
    kitchen.add_item(cabinets)
    trash_can = things.Item("trash can", "a trash can", "A tall trash can with a swinging lid.")
    trash_can.set_property("is_interactable", True)
    trash_can.set_property("is_openable", True)
    trash_can.set_property("is_open", False)
    trash_can.set_property("fullness", 20)
    trash_can.set_property("is_clean", False)
    kitchen.add_item(trash_can)
    microwave = things.Item("microwave", "a microwave oven", "A compact microwave for heating food.")
    microwave.set_property("is_interactable", True)
    microwave.set_property("is_openable", True)
    microwave.set_property("is_open", False)
    microwave.set_property("is_switchable", True)
    microwave.set_property("is_on", False)
    microwave.set_property("is_clean", True)
    microwave.set_property("timer", 0)
    kitchen.add_item(microwave)
    toaster = things.Item("toaster", "a toaster", "A toaster for making crispy toast.")
    toaster.set_property("is_interactable", True)
    toaster.set_property("is_switchable", True)
    toaster.set_property("is_on", False)
    toaster.set_property("is_clean", True)
    kitchen.add_item(toaster)
    coffee_maker = things.Item("coffee maker", "a coffee maker", "A coffee maker ready to brew.")
    coffee_maker.set_property("is_interactable", True)
    coffee_maker.set_property("is_switchable", True)
    coffee_maker.set_property("is_on", False)
    coffee_maker.set_property("is_clean", True)
    coffee_maker.set_property("water_level", 0)
    kitchen.add_item(coffee_maker)
    bread = things.Item("bread", "a loaf of bread", "A fresh loaf of bread.")
    bread.set_property("is_interactable", True)
    bread.set_property("is_consumable", True)
    bread.set_property("freshness", 90)
    bread.set_property("weight", 0.5)
    bread.set_property("state", "fresh")
    bread.set_property("color", "brown")
    apple = things.Item("apple", "a red apple", "A fresh red apple.")
    apple.set_property("is_interactable", True)
    apple.set_property("is_consumable", True)
    apple.set_property("freshness", 80)
    apple.set_property("weight", 0.2)
    apple.set_property("state", "fresh")
    apple.set_property("color", "red")
    milk = things.Item("milk", "a bottle of milk", "A cold bottle of milk.")
    milk.set_property("is_interactable", True)
    milk.set_property("is_consumable", True)
    milk.set_property("freshness", 70)
    milk.set_property("weight", 1.0)
    milk.set_property("state", "fresh")
    milk.set_property("color", "white")
    fridge.inventory = {"bread": bread, "apple": apple, "milk": milk}
    plate = things.Item("plate", "a ceramic plate", "A clean ceramic plate.")
    plate.set_property("is_interactable", True)
    plate.set_property("is_clean", True)
    plate.set_property("material", "ceramic")
    plate.set_property("color", "white")
    cup = things.Item("cup", "a glass cup", "A clear glass cup.")
    cup.set_property("is_interactable", True)
    cup.set_property("is_clean", True)
    cup.set_property("material", "glass")
    cup.set_property("color", "clear")
    bowl = things.Item("bowl", "a soup bowl", "A round soup bowl.")
    bowl.set_property("is_interactable", True)
    bowl.set_property("is_clean", True)
    bowl.set_property("material", "ceramic")
    bowl.set_property("color", "white")
    fork = things.Item("fork", "a metal fork", "A shiny metal fork.")
    fork.set_property("is_interactable", True)
    fork.set_property("is_clean", True)
    fork.set_property("material", "metal")
    fork.set_property("color", "silver")
    knife = things.Item("knife", "a kitchen knife", "A sharp kitchen knife.")
    knife.set_property("is_interactable", True)
    knife.set_property("is_clean", True)
    knife.set_property("material", "metal")
    knife.set_property("color", "silver")
    spoon = things.Item("spoon", "a soup spoon", "A large soup spoon.")
    spoon.set_property("is_interactable", True)
    spoon.set_property("is_clean", True)
    spoon.set_property("material", "metal")
    spoon.set_property("color", "silver")
    cabinets.inventory = {"plate": plate, "cup": cup, "bowl": bowl, "fork": fork, "knife": knife, "spoon": spoon}
    entry_door = things.Item("entry door", "the front door", "A sturdy front door leading outside.")
    entry_door.set_property("is_interactable", True)
    entry_door.set_property("is_openable", True)
    entry_door.set_property("is_open", False)
    entry_door.set_property("is_locked", True)
    entry_door.set_property("is_broken", False)
    entry_door.set_property("material", "wood")
    entry_door.set_property("color", "brown")
    entry.add_item(entry_door)
    welcome_mat = things.Item("welcome mat", "a welcome mat", "A mat that might hide something underneath.")
    welcome_mat.set_property("is_interactable", True)
    welcome_mat.set_property("is_clean", True)
    welcome_mat.set_property("color", "green")
    entry.add_item(welcome_mat)
    # Add a redundant container for the key
    key_box = things.Item("key box", "a small key box", "A small box for holding keys.")
    key_box.set_property("is_container", True)
    key_box.set_property("is_openable", True)
    key_box.set_property("is_open", True)
    key_box.set_property("gettable", False)
    key = things.Item("key", "a small key", "A small key for the front door.")
    key.set_property("gettable", True)
    key_box.inventory = {"key": key}
    entry.add_item(key_box)
    dining_table = things.Item("dining table", "a dining table", "A long table for meals.")
    dining_table.set_property("is_interactable", True)
    dining_table.set_property("is_clean", True)
    dining_table.set_property("material", "wood")
    dining_table.set_property("color", "brown")
    dining.add_item(dining_table)
    chairs = things.Item("chairs", "dining chairs", "Chairs for sitting at the table.")
    chairs.set_property("is_interactable", True)
    chairs.set_property("is_clean", True)
    chairs.set_property("material", "wood")
    chairs.set_property("color", "white")
    dining.add_item(chairs)
    tableware = things.Item("tableware", "tableware set", "Plates, cups, and utensils for meals.")
    tableware.set_property("is_interactable", True)
    tableware.set_property("is_clean", True)
    tableware.set_property("material", "ceramic")
    tableware.set_property("color", "white")
    dining.add_item(tableware)
    toilet = things.Item("toilet", "a toilet", "A clean toilet.")
    toilet.set_property("is_interactable", True)
    toilet.set_property("is_clean", True)
    toilet.set_property("is_clogged", False)
    toilet.set_property("color", "white")
    bathroom.add_item(toilet)
    bath_sink = things.Item("sink", "a bathroom sink", "A clean sink with running water.")
    bath_sink.set_property("is_interactable", True)
    bath_sink.set_property("is_switchable", True)
    bath_sink.set_property("is_on", False)
    bath_sink.set_property("is_clean", True)
    bath_sink.set_property("water_level", 0)
    bathroom.add_item(bath_sink)
    bathtub = things.Item("bathtub", "a bathtub", "A clean bathtub, perfect for a relaxing soak.")
    bathtub.set_property("is_interactable", True)
    bathtub.set_property("is_fillable", True)
    bathtub.set_property("volume", 0)
    bathtub.set_property("is_clean", True)
    bathroom.add_item(bathtub)
    shower = things.Item("shower", "a shower", "A shower for bathing.")
    shower.set_property("is_interactable", True)
    shower.set_property("is_switchable", True)
    shower.set_property("is_on", False)
    shower.set_property("is_clean", True)
    bathroom.add_item(shower)
    medicine_cabinet = things.Item("medicine cabinet", "a medicine cabinet", "A cabinet for storing medicine.")
    medicine_cabinet.set_property("is_interactable", True)
    medicine_cabinet.set_property("is_openable", True)
    medicine_cabinet.set_property("is_open", False)
    medicine_cabinet.set_property("is_clean", True)
    bathroom.add_item(medicine_cabinet)
    medicine = things.Item("medicine", "a bottle of medicine", "Medicine for health.")
    medicine.set_property("is_interactable", True)
    medicine.set_property("is_consumable", True)
    medicine.set_property("dosage", 1)
    medicine.set_property("expiration_date", "2025-12-31")
    medicine_cabinet.inventory = {"medicine": medicine}
    toothbrush = things.Item("toothbrush", "a toothbrush", "A toothbrush for hygiene.")
    toothbrush.set_property("is_interactable", True)
    toothbrush.set_property("is_clean", True)
    toothbrush.set_property("color", "blue")
    toothpaste = things.Item("toothpaste", "a tube of toothpaste", "A tube of toothpaste.")
    toothpaste.set_property("is_interactable", True)
    toothpaste.set_property("is_consumable", True)
    toothpaste.set_property("is_clean", True)
    toothpaste.set_property("color", "white")
    bathroom.add_item(toothbrush)
    bathroom.add_item(toothpaste)
    washer = things.Item("washer", "a washing machine", "A front-loading washing machine.")
    washer.set_property("is_interactable", True)
    washer.set_property("is_switchable", True)
    washer.set_property("is_on", False)
    washer.set_property("is_full", False)
    washer.set_property("cycle_time", 0)
    washer.set_property("is_clean", True)
    laundry.add_item(washer)
    dryer = things.Item("dryer", "a clothes dryer", "A dryer for drying clothes.")
    dryer.set_property("is_interactable", True)
    dryer.set_property("is_switchable", True)
    dryer.set_property("is_on", False)
    dryer.set_property("is_full", False)
    dryer.set_property("cycle_time", 0)
    dryer.set_property("is_clean", True)
    laundry.add_item(dryer)
    laundry_basket = things.Item("laundry basket", "a laundry basket", "A basket for dirty clothes.")
    laundry_basket.set_property("is_interactable", True)
    laundry_basket.set_property("is_full", False)
    laundry_basket.set_property("color", "blue")
    laundry.add_item(laundry_basket)
    detergent = things.Item("detergent", "a bottle of detergent", "Detergent for washing clothes.")
    detergent.set_property("is_interactable", True)
    detergent.set_property("is_consumable", True)
    detergent.set_property("amount", 100)
    laundry.add_item(detergent)
    couch = things.Item("couch", "a couch", "A comfortable couch.")
    couch.set_property("is_interactable", True)
    couch.set_property("is_clean", True)
    couch.set_property("material", "fabric")
    couch.set_property("color", "gray")
    living.add_item(couch)
    bookshelf = things.Item("bookshelf", "a bookshelf", "A bookshelf filled with books.")
    bookshelf.set_property("is_interactable", True)
    bookshelf.set_property("is_container", True)
    bookshelf.set_property("fullness", 80)
    bookshelf.set_property("material", "wood")
    living.add_item(bookshelf)
    lamp = things.Item("lamp", "a lamp", "A lamp for lighting the room.")
    lamp.set_property("is_interactable", True)
    lamp.set_property("is_switchable", True)
    lamp.set_property("is_on", False)
    lamp.set_property("brightness", 70)
    lamp.set_property("color", "yellow")
    living.add_item(lamp)
    tv = things.Item("tv", "a television", "A big TV with a remote nearby.")
    tv.set_property("is_interactable", True)
    tv.set_property("is_switchable", True)
    tv.set_property("is_on", False)
    tv.set_property("volume", 10)
    tv.set_property("channel", 1)
    tv.set_property("is_broken", False)
    living.add_item(tv)
    remote_control = things.Item("remote control", "a remote control", "A remote for the TV.")
    remote_control.set_property("is_interactable", True)
    remote_control.set_property("has_battery", True)
    remote_control.set_property("battery_level", 80)
    remote_control.set_property("is_lost", False)
    living.add_item(remote_control)
    book = things.Item("book", "a book", "A book to read.")
    book.set_property("is_interactable", True)
    book.set_property("is_read", False)
    book.set_property("genre", "mystery")
    living.add_item(book)
    board_game = things.Item("board game", "a board game", "A board game for entertainment.")
    board_game.set_property("is_interactable", True)
    board_game.set_property("is_playable", True)
    board_game.set_property("is_complete", True)
    living.add_item(board_game)
    game_table = things.Item("game table", "a game table", "A table for playing games.")
    game_table.set_property("is_interactable", True)
    game_table.set_property("is_clean", True)
    game_table.set_property("material", "wood")
    game.add_item(game_table)
    arcade_machine = things.Item("arcade machine", "an arcade machine", "A retro arcade machine.")
    arcade_machine.set_property("is_interactable", True)
    arcade_machine.set_property("is_switchable", True)
    arcade_machine.set_property("is_on", False)
    arcade_machine.set_property("score", 0)
    arcade_machine.set_property("is_broken", False)
    game.add_item(arcade_machine)
    game_pieces = things.Item("game pieces", "game pieces", "Pieces for board games.")
    game_pieces.set_property("is_interactable", True)
    game_pieces.set_property("is_lost", False)
    game_pieces.set_property("color", "red")
    game.add_item(game_pieces)
    scoreboard = things.Item("scoreboard", "a scoreboard", "A scoreboard for tracking scores.")
    scoreboard.set_property("is_interactable", True)
    scoreboard.set_property("score", 0)
    game.add_item(scoreboard)
    mailbox = things.Item("mailbox", "a mailbox", "A mailbox for receiving mail.")
    mailbox.set_property("is_interactable", True)
    mailbox.set_property("is_openable", True)
    mailbox.set_property("is_open", False)
    mailbox.set_property("has_mail", False)
    mailbox.set_property("color", "white")
    garden_hose = things.Item("garden hose", "a garden hose", "A hose for watering plants.")
    garden_hose.set_property("is_interactable", True)
    garden_hose.set_property("is_switchable", True)
    garden_hose.set_property("is_on", False)
    garden_hose.set_property("is_connected", True)
    garden_hose.set_property("is_leaking", False)
    grill = things.Item("grill", "a grill", "A grill for outdoor cooking.")
    grill.set_property("is_interactable", True)
    grill.set_property("is_switchable", True)
    grill.set_property("is_on", False)
    grill.set_property("temperature", 0)
    grill.set_property("is_clean", True)
    lawn_mower = things.Item("lawn mower", "a lawn mower", "A mower for cutting grass.")
    lawn_mower.set_property("is_interactable", True)
    lawn_mower.set_property("is_switchable", True)
    lawn_mower.set_property("is_on", False)
    lawn_mower.set_property("is_broken", False)
    lawn_mower.set_property("fuel_level", 100)
    door_outside = things.Item("door", "a back door", "A door to the outside yard.")
    door_outside.set_property("is_interactable", True)
    door_outside.set_property("is_openable", True)
    door_outside.set_property("is_open", False)
    door_outside.set_property("is_locked", False)
    door_outside.set_property("is_broken", False)
    garden_tools = things.Item("garden tools", "garden tools", "Tools for gardening tasks.")
    garden_tools.set_property("is_interactable", True)
    garden_tools.set_property("is_clean", True)
    garden_tools.set_property("type", "shovel")
    plants = things.Item("plants", "garden plants", "Plants and flowers in the garden.")
    plants.set_property("is_interactable", True)
    plants.set_property("is_watered", False)
    plants.set_property("growth_stage", 1)
    plants.set_property("color", "green")
    light_switch = things.Item("light switch", "a light switch", "A switch for the room lights.")
    light_switch.set_property("is_interactable", True)
    light_switch.set_property("is_switchable", True)
    light_switch.set_property("is_on", False)
    light_switch.set_property("is_broken", False)
    thermostat = things.Item("thermostat", "a thermostat", "A thermostat for setting temperature.")
    thermostat.set_property("is_interactable", True)
    thermostat.set_property("temperature", 22)
    thermostat.set_property("is_locked", False)
    phone = things.Item("phone", "a phone", "A phone for making calls.")
    phone.set_property("is_interactable", True)
    phone.set_property("is_connected", True)
    phone.set_property("battery_level", 100)
    computer = things.Item("computer", "a computer", "A desktop computer.")
    computer.set_property("is_interactable", True)
    computer.set_property("is_switchable", True)
    computer.set_property("is_on", False)
    computer.set_property("is_broken", False)
    flashlight = things.Item("flashlight", "a flashlight", "A portable flashlight.")
    flashlight.set_property("is_interactable", True)
    flashlight.set_property("is_switchable", True)
    flashlight.set_property("is_on", False)
    flashlight.set_property("has_battery", True)
    flashlight.set_property("battery_level", 100)
    flashlight.set_property("is_broken", False)
    battery = things.Item("battery", "a battery", "A battery for powering devices.")
    battery.set_property("is_interactable", True)
    battery.set_property("is_consumable", True)
    battery.set_property("is_charged", True)
    battery.set_property("charge_level", 100)
    containers = {
        "fridge": fridge,
        "cabinets": cabinets,
        "closet": closet,
        "dresser": dresser,
        "medicine cabinet": medicine_cabinet,
        "bathtub": bathtub,
    }
    player = things.Character(
        name="Player",
        description="An explorer in a large, modern house.",
        persona="I am curious and love to explore new places."
    )
    custom_actions: list[Type[HouseActionProtocol]] = [
        # Prioritize loose items first
        OpenCloseItem, CloseItem, TakeFromContainer, UnlockDoor, LockDoor, TurnOnSink, TurnOffSink, FillCup, FillBathtub, UseWashingMachine, WatchTV, PlayPool, TakeBath, UseComputer
    ]
    game_obj = games.Game(entry, player, custom_actions=custom_actions)
    game_obj.containers = containers
    return game_obj 